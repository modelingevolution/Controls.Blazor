@using System.Globalization
@using ModelingEvolution.Drawing
@using MudBlazor.Utilities
@implements IDisposable
 
<g transform="@Transform()"
   class=@_class 
   @onmousedown=@OnDown 
   @onmousedown:stopPropagation="true">
    @ChildContent
</g>

@code {
    PointD? location;
    VectorD mousePosition;
    MoveDelegate _filter;
    private string _class;

    [CascadingParameter]
    public ViewBox ViewBox { get; set; }

    [CascadingParameter]
    internal MouseService MouseService { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    private string Transform()
    {
        return string.Format(CultureInfo.InvariantCulture, "translate({0}, {1})", Location.X, Location.Y);
    }

    [Parameter]
    public PointD Location
    {
        get => location ?? PointD.Zero;
        set { if (!location.HasValue || (!isDown & LocationChanged.HasDelegate)) { location = value; } }
    }
    [Parameter] 
    public EventCallback<PointD> LocationChanged { get; set; }

    [Parameter] 
    public EventCallback<MouseEventArgs> MouseDown { get; set; }

    [Parameter]
    public MoveDelegate? CanMove { get; set; }

    [Parameter]
    public bool IsDragDisabled { get; set; }


    [Parameter]
    public string? Class { get; set; }

    protected override void OnInitialized() {
        MouseService.OnMove += OnMove;
        MouseService.OnUp += OnUpLeave;
        MouseService.OnLeave += OnUpLeave;
        base.OnInitialized();
    }

    private static bool CanMoveFunc(PointD src, out PointD dst)
    {
        dst = src;
        return true;
    }
    protected override void OnParametersSet()
    {
        _filter = CanMove ?? CanMoveFunc;
        if (!IsDragDisabled)
            ComputeCss();
        else _class = Class ?? string.Empty;
    }

    private void ComputeCss()
    {
        CssBuilder tmp = new CssBuilder(Class ?? String.Empty);
        if (Class == null || !Class.Contains("cursor-"))
        {
            if(!IsDragDisabled)
                tmp.AddClass(_isDown ? "cursor-grabbing" : "cursor-grab");
        }
        _class = tmp.Build();
    }


    bool _isDown;
    bool isDown {
        get => _isDown;
        set {

            _isDown = value;
            if (this.IsDragDisabled)
                return;
            if(value)
                _class = string.Join(';', _class.Split(';').Where(x => !x.StartsWith("cursor-")).Union(["cursor-grabbing"]));
            else ComputeCss();
        }
    }

    
    async Task OnDown(MouseEventArgs e)
    {
        isDown = true;
        mousePosition = e.ClientMouseCoordinates();
        if (MouseDown.HasDelegate)
            await MouseDown.InvokeAsync(e);
    }

    async Task OnUpLeave(MouseEventArgs e)
        => isDown = false;

    async Task OnMove( MouseEventArgs e) {
        if (!isDown)
            return;

        var tmp = e.ClientMouseCoordinates();
        var d = mousePosition - tmp;
        d = ViewBox.Calculate(d);
        var dstLocation = location - d;
        if(dstLocation.HasValue)
        {
            if (!_filter(dstLocation.Value, out var dst))
                return;
            else dstLocation = dst;
        }

        location = dstLocation;
        mousePosition = tmp;

        await LocationChanged.InvokeAsync(location.Value);
    }

    public void Dispose() {
        MouseService.OnMove -= OnMove;
        MouseService.OnUp -= OnUpLeave;
        MouseService.OnLeave -= OnUpLeave;
    }
}