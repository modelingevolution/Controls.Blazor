@using System.Globalization

<CascadingValue Value="mouseSrv">
    <CascadingValue Value="@_viewBox">
        <svg class="@Class" 
             style="@Style"
             width="@Size.Width.ToString(CultureInfo.InvariantCulture)" 
             height="@Size.Height.ToString(CultureInfo.InvariantCulture)"
             viewBox="@_viewBox"
             preserveAspectRatio="@_aspectRatio"
             xmlns="http://www.w3.org/2000/svg"
             @onmousedown="@OnMouseClick"
             @onmousemove=@(e => mouseSrv.FireMove(e))
             @onmouseup=@MouseUp
             @onmouseleave=@MouseLeave>
            @ChildContent
        </svg>
    </CascadingValue>
</CascadingValue>

@code {
    private readonly MouseService mouseSrv = new ();
    private string _aspectRatio = "xMidYMid meet";
    private ViewBox _viewBox;

    [Parameter]
    public ViewBox ViewBox { get; set; }
    
    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter] 
    public Size<double> Size { get; set; } = new Size<double>(600,800);


    [Parameter]
    public EventCallback<CanvasMouseEventArgs> OnMouseDown { get; set; }

    [Parameter]
    public EventCallback<CanvasMouseEventArgs> OnMouseUp { get; set; }

    [Parameter]
    public EventCallback<CanvasMouseEventArgs> OnMouseLeave { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool DisablePreserveAspectRatio { get; set; }

    private async Task MouseUp(MouseEventArgs args)
    {
        await mouseSrv.FireUp(args);
        await FireCallback(args, OnMouseUp);
    }
    private async Task MouseLeave(MouseEventArgs args)
    {
        await mouseSrv.FireLeave(args);
        await FireCallback(args, OnMouseLeave);
    }
    private async Task FireCallback(MouseEventArgs args, EventCallback<CanvasMouseEventArgs> ev)
    {
        if (ev.HasDelegate)
        {
            var x = args.OffsetX;
            var y = args.OffsetY;

            await ev.InvokeAsync(new CanvasMouseEventArgs()
            {
                Args = args,
                Location = ViewBox.Calculate(x, y)
            });
        }
    }

    protected override void OnParametersSet()
    {
        if (DisablePreserveAspectRatio)
            _aspectRatio = "none";
        _viewBox = ViewBox ?? new ViewBox() { Size = this.Size };
        _viewBox.ElementSize = Size;
    }

    private async Task OnMouseClick(MouseEventArgs args) => await FireCallback(args, OnMouseDown);
}