@using ModelingEvolution.Drawing

@foreach (var i in _histogramSeriesVm.Curves)
{
    <CubicBezierCurve Curve="@i" Stroke="Colors.Black" Fill="@Colors.Transparent"></CubicBezierCurve>
}
@foreach (var i in _histogramSeriesVm.Indexes)
{
    <Draggable @bind-Location="@i.Location" CanMove="@i.CanMove">
        <SvgCircle R="10" Fill="@Colors.Black"  />
    </Draggable>
}

@code
{
    [CascadingParameter]
    internal HistogramVm Parent { get; set; }
    readonly HistogramSeriesVm _histogramSeriesVm = new();

   
    [Parameter]
    public byte[] Values { get; set; }

    [Parameter]
    public EventCallback<byte[]> ValuesChanged { get; set; }

    [Parameter]
    public PointD[] Points { get; set; }

    [Parameter]
    public EventCallback<PointD[]> PointsChanged { get; set; }
    
    protected override void OnInitialized()
    {
        Parent.Register(this._histogramSeriesVm);
        _histogramSeriesVm.Completed += OnCompleted;
        _histogramSeriesVm.Width = Parent.Width;
        
    }

    private async Task OnCompleted(byte[] arg)
    {
        Values = arg;
        if (ValuesChanged.HasDelegate)
            await ValuesChanged.InvokeAsync(arg);
        Size<double> ratio = new Size<double>(255/ this.Parent.Width, 1);
        Points = _histogramSeriesVm.Points.Select(x=> x * ratio).ToArray();
        if (PointsChanged.HasDelegate)
            await PointsChanged.InvokeAsync(Points);
    }
}